#!/bin/sh

#
# Distro dots install list
#

arch(){
	echo "######################"
	echo "# dotfiles Installer #"
	echo "######################"
	echo "|   for Arch Linux   |"
	echo "**********************"

	# Installing opendoas
	sudo pacman -Syu --needed opendoas
	# Updated doas permissions
	sudo cp -rf ".local/etc/doas.conf" "/etc/"
	doas cp -rf ".local/etc/hosts" "/etc/"
	# Installing Deps
	doas pacman -Rns vim
	doas pacman --needed -Syu screenfetch zsh youtube-dl engrampa nmap ncmpcpp xwallpaper newsboat vifm zathura tk flameshot ffmpeg texlive-most pcmanfm lxappearance ntp redshift numlockx htop xclip imagemagick transmission-gtk neovim mpv mpd mpc sxiv zathura-pdf-mupdf zathura-ps python-pywal r pandoc-citeproc qutebrowser python python-pip python2 python2-pip ccache automake lzop bison gperf zip curl python-networkx squashfs-tools libxml2 pngcrush schedtool make bc android-tools jdk8-openjdk java8-openjfx gimp audacity kdenlive frei0r-plugins breeze-icons vlc inkscape unzip unarchiver arandr shellcheck arc-gtk-theme linux-firmware atom ctags unoconv picom nodejs yarn p7zip gzip tar xz papirus-icon-theme neomutt isync uncrustify lsd

	# Install Computer Science Programs
	printf "Do yo want to install Computer Science Programs? [Y/n]" && read -r CS
	if [ "$CS" != "N" ] && [ "$CS" != "n" ]; then
		doas pacman --needed --noconfirm -S jdk11-openjdk java11-openjfx intellij-idea-community-edition valgrind doxygen gdb mysql-workbench octave && clear
	fi

	# Install Extra AUR packages
	printf "Do yo want to setup extra git packages? [Y/n]" && read -r AUR
	if [ "$AUR" != "N" ] && [ "$AUR" != "n" ]; then
		yay --needed -Syu lbry-app-bin xorg-transset cordless-git
	fi

	# Cleanup
	doas pacman --noconfirm -Scc
}

gentoo(){
	echo "######################"
	echo "# dotfiles Installer #"
	echo "######################"
	echo "|  for Gentoo Linux  |"
	echo "**********************"

	# Checking if is root
	if [ "$(id -u)" != "0" ]; then
		echo "This script must be run as root" 1>&2
		exit 1
	fi

	printf "Do you want to install Extra Packages? [Y/n]" && read -r BASE
	if [ "$BASE" != "N" ] && [ "$BASE" != "n" ]; then
		emerge --ask --quiet xwallpaper x11-misc/xclip vifm zathura zathura-pdf-poppler zip wget make bc unar xorg-x11 xinit zsh pm-utils doas sys-fs/dosfstools app-editors/neovim alsa-lib alsa-plugins
	fi

	printf "Do you want to install Extra Packages? [Y/n]" && read -r EXTRA
	if [ "$EXTRA" != "N" ] && [ "$EXTRA" != "n" ]; then
		emerge --ask --quiet sxiv mpv youtube-dl ncmpcpp mpc mpd tk flameshot ntfs3g lxappearance redshift numlockx transmission R pandoc-citeproc android-tools shellcheck app-admin/system-config-printer papirus-icon-theme arc-theme texlive net-libs/nodejs mail-client/neomutt net-mail/isync qutebrowser libreoffice-bin unoconv dev-util/ctags gimp imagemagick lsd transset
	fi

}

void(){
	echo "######################"
	echo "# dotfiles Installer #"
	echo "######################"
	echo "|   for Void Linux   |"
	echo "**********************"

	# Installing opendoas
	sudo xbps-install opendoas

	# Updated doas permissions
	sudo cp -rf ".local/etc/doas.conf" "/etc/"
	doas cp -rf ".local/etc/hosts" "/etc/"

	# Installing apps
	doas xbps-install xorg git neovim opendoas qutebrowser ncmpcpp neofetch atom zsh pkg-config xwallpaper picom NetworkManager NetworkManager-devel ImageMagick kdenlive gimp lxappearance ffmpeg mpv vifm make gcc libXft-devel libXinerama-devel libX11-devel webkit2gtk webkit2gtk-devel xdg-user-dirs engrampa zathura zathura-pdf-poppler ctags flameshot unoconv neomutt isync nodejs curl wget R void-repo-multilib pywal android-tools openjdk8 xz papirus-icon-theme unzip unar p7zip arc-theme numlockx alsa-lib alsa-utils lutris shellcheck redshift ntfs-3g git sxiv mpc mpd tar uncrustify texlive-bin xclip transset lsd

	# Install Computer Science Programs
	printf "Do yo want to install Computer Science Programs? [Y/n]" && read -r CS
	if [ "$CS" != "N" ] && [ "$CS" != "n" ]; then
		doas xbps-install -Su openjdk11 intellij-idea-community-edition valgrind doxygen gdb octave && clear
	fi

	# Removing Old dhcpcd entries from boot
	sudo rm -rf /var/service/dhcp*

	# Adding Services to boot
	sudo ln -s /etc/sv/NetworkManager /var/service/
	sudo ln -s /etc/sv/dbus /var/service
}

baseInstall(){
	# Setting Vars
	CURDIR=$(pwd)

	#Preparing Dirs and Files for dotfiles
	cp -rf .config "$HOME"
	cp -rf .local "$HOME"
	cp -rf .xinitrc "$HOME"
	cp -rf .xprofile "$HOME"
	cp -rf .zprofile "$HOME"
	mkdir -p ~/Mount
	mkdir -p ~/Mount/Drive
	mkdir -p ~/Mount/Drive2
	mkdir -p ~/Mount/Drive3
	mkdir -p ~/Mount/MTP
	mkdir -p ~/Mount/USB
	mkdir -p ~/Mount/USB2
	mkdir -p ~/Mount/USB3
	mkdir -p ~/Documents/PDF
	mkdir -p ~/Documents/Markdown
	mkdir -p ~/Documents/Groff
	mkdir -p ~/Documents/Java
	mkdir -p ~/Documents/Disks
	mkdir -p ~/Documents/Archives
	mkdir -p ~/Documents/Word
	mkdir -p ~/Documents/Powerpoint
	mkdir -p ~/Documents/Excel
	mkdir -p ~/Pictures/Screenshots
	mkdir -p ~/Pictures/GIMP
	mkdir -p ~/Videos/Recordings
	mkdir -p ~/Source
	mkdir -p ~/.config/git
	mkdir -p ~/.config/gnupg
	mkdir -p ~/.config/wallpaper

	## Run Suckless Script
	cd ~/.local/src/suck/ || exit
	sh sucklessUpdate
	cd "$CURDIR" || exit

	# Fixing Java Programs on Window Managers
	doas sh -c 'echo "export _JAVA_AWT_WM_NONREPARENTING=1" >>/etc/profile.d/jre.sh'

	# Changing default shell to zsh
	chsh -s /bin/zsh

	# Setting up Neovim
	## Linking Neovim to Vim
	ln -s /usr/bin/nvim ~/.local/bin/vim

	## Installing Neovim Plugin Manager (Vim Plug)
	curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
	https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

	## Installing Plugins
	nvim -c PlugInstall

	## Installing Spell Checker
	nvim -c setlocal spell spelllang=pt_pt

	# Cleanup
	rm -rf ~/.local/etc ~/.local/usr
}

postInstall()
{
	if [ "$DISTRO" = "gentoo" ];then
		{
			# Adding to audio group
			usermod -aG audio "$(whoami)"
		}
	fi

	# Setup Git account
	printf "Do yo want to setup Git account? [Y/n]" && read -r GIT
	if [ "$GIT" != "N" ] && [ "$GIT" != "n" ]; then
		printf "Username: " && read -r USER
		printf "Email: " && read -r EMAIL
		git config --global user.name "$USER"
		git config --global user.email "$EMAIL"
	fi

	# Setup atom
	printf "Do yo want to install Atom packages? [Y/n]" && read -r ATOM
	if [ "$ATOM" != "N" ] && [ "$ATOM" != "n" ]; then
		apm install atom-beautify file-icons pigments teletype atom-doxit highlight-selected platformio-ide-terminal vim-mode-plus
	fi

	# Setup flathub
	printf "Do yo want to install flatpak packages? [Y/n]" && read -r FLAT
	if [ "$FLAT" != "N" ] && [ "$FLAT" != "n" ]; then
		pkg i flatpak
		sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
	fi
}

#
# Main Script
#

echo "Detecting Distro..."
DISTRO=$(grep ^ID= /etc/os-release | sed s:ID=::g | sed s:\"::g)

if [ -f /usr/local/bin/dwm ]; then
	{
		postInstall
	}
else
	{
		case "$DISTRO" in
			arch)
			arch && baseInstall
			;;
			gentoo)
			gentoo && base
			;;
			void)
			void && base
		esac
	}
fi
